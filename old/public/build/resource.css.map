{
  "version": 3,
  "file": "resource.css",
  "sources": [
    "../../Svg.svelte",
    "../../ItemList.svelte",
    "../../Resource.svelte"
  ],
  "sourcesContent": [
    "<svg version=\"1.1\" class=\"fa-icon {className}\"\n  class:fa-spin={spin} class:fa-pulse={pulse} class:fa-inverse={inverse}\n  class:fa-flip-horizontal=\"{flip === 'horizontal'}\" class:fa-flip-vertical=\"{flip === 'vertical'}\"\n  {x} {y} {width} {height}\n  aria-label={label}\n  role=\"{ label ? 'img' : 'presentation' }\"\n  viewBox={box} style={style}\n  >\n  <slot></slot>\n</svg>\n\n<style>\n.fa-icon {\n  display: inline-block;\n  fill: currentColor;\n}\n.fa-flip-horizontal {\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  transform: scale(1, -1);\n}\n.fa-spin {\n  animation: fa-spin 1s 0s infinite linear;\n}\n.fa-inverse {\n  color: #fff;\n}\n.fa-pulse {\n  animation: fa-spin 1s infinite steps(8);\n}\n@keyframes fa-spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n</style>\n\n<script>\n  let className;\n\n  export { className as class };\n\n  export let width;\n  export let height;\n  export let box;\n\n  export let spin = false;\n  export let inverse = false;\n  export let pulse = false;\n  export let flip = null;\n\n  // optionals\n  export let x = undefined;\n  export let y = undefined;\n  export let style = undefined;\n  export let label = undefined;\n</script>\n",
    "\n<script>\n\timport Icon from 'svelte-awesome';\n\timport { sort, sortUp, sortDown } from 'svelte-awesome/icons';\n\n    export let headers;\n    export let items;\n    export let selectedIdx;\n    export let item;\n    export let refreshData;\n    export let blankItem;\n    \n    async function headerSort(e){\n\t\tlet data = e.target.getAttribute(\"data\");\n\t\tlet header = headers.find((h)=>{\n\t\t\treturn h.name == data;\n\t\t});\n\t\tif (header){\n\t\t\tlet maxOrder = Math.max( ...(headers.map((h)=>{return h.order})));\n\n\t\t\theader.order = maxOrder + 1;\n\t\t\tif (header.sort==\"\") header.sort = \"up\";\n\t\t\telse if (header.sort==\"up\") header.sort = \"down\";\n\t\t\telse if (header.sort==\"down\") header.sort = \"\";\n\t\t}\n\t\tconsole.log(headers);\n\t\theaders = headers;\n\t\tawait refreshData();\n    }\n\n\tfunction click(e){\n\t\tselectedIdx = e.currentTarget.getAttribute('idx');\n\t\tif (selectedIdx >= 0) item = items[selectedIdx];\n\t\telse item = { ...blankItem };\t//clone the blank item;\n\t}\n\n</script>\n<table class='table is-bordered is-striped is-fullwidth'>\n    <thead>\n        {#each headers as header}\n            <th class=\"th-title\" data={header.name} on:click|stopPropagation|preventDefault={headerSort}>\n                {header.name}\n                {#if header.sort == \"up\"}\n                    <Icon data={sortUp}/>\n                {:else if header.sort == \"down\"}\n                    <Icon data={sortDown}/>\n                {:else}\n                    <Icon data={sort}/>\n                {/if}\n            </th>\n        {/each}\n    </thead>\n    <tbody>\n        {#each items as item, idx}\n            <tr on:click={click} idx={idx} class={idx == selectedIdx ? 'is-selected' : ''}>\n                {#each headers as header}\n                    <td>{ item[header.name] }</td>\n                {/each}\n            </tr>\n        {/each}\n\n        <tr on:click={click} idx=-1 class={-1 == selectedIdx ? 'is-selected' : ''}>\n            {#each headers as header}\n                <td>&nbsp;</td>\n            {/each}\n        </tr>\n\n    </tbody>\n</table>\n<style>\n\t/*disable double to select, as click on title will toggle sort, of user click to quick, it will select the title*/\n\t.th-title {\n\t\t-moz-user-select: none;\n\t\t-webkit-user-select: none;\n\t\t-ms-user-select: none;\n\t\tuser-select: none;\n\t}\n</style>",
    "<script>\n\timport { onMount, afterUpdate, tick } from 'svelte';\n\timport Paginator from '../components/Paginator.svelte';\n\timport ItemList from '../components/ItemList.svelte';\n\timport ItemForm from '../components/ItemForm.svelte';\n\timport {\n\t\tcallServer,\n\t} from '../components/utils';\n\n\tasync function itemIndex() {\n\t\tlet sortBy = '';\n\t\tif (headers){\n\t\t\tsortBy = headers\n\t\t\t\t.filter((h)=>{return h.sort})\t//only sort is true\n\t\t\t\t.sort((a, b)=>{return b.order-a.order}) //order by order\n\t\t\t\t.map((h)=>{return h.name+' '+(h.sort=='up' ? 'asc' : 'desc')})\t//return 'name desc'\n\t\t\t\t.reduce((last, h)=>{return last + h + ','}, '')\t//return name desc, size desc\n\t\t\t\t.slice(0, -1);\t//remove the last ,\n\t\t\tconsole.log(sortBy);\n\t\t}\n\t\tlet url = \"/resources.json?sort=\" + sortBy;\n\t\tif (page) url = url+\"&page=\"+page;\n\t\tlet rc = await callServer('GET', url);\n\t\treturn rc;\n\t}\n\n\tlet page;\n\tlet pages;\n\tlet items = [];\n\tlet headers;\t\n\tlet selectedIdx = -1;\n\n\tconst blankItem = {\n\t\tname: '',\n\t};\n\n\tlet item = { ...blankItem };\t//clone the blank item\n\t\n\tasync function refreshData() {\n\t\tlet rc = await itemIndex();\n\t\titems = rc.rows;\n\t\tpages = rc.pages;\n\t\t\n\t\tif (items[0])\n\t\tif (!headers) headers = Object.keys(items[0]).map((h)=>{\n\t\t\treturn {\n\t\t\t\tname: h,\n\t\t\t\tsort: \"\",\n\t\t\t\torder: 0\n\t\t\t};\n\t\t});\n\n\t\titem = { ...blankItem };\n\t};\n\n\tonMount(async () => {\n\t\tconsole.log(\"on mount\");\n\t\tawait refreshData();\n\t});\n\t\n\tasync function updateItem(){\n\t\tlet name = document.getElementById(\"name\");\n\t\tif(!name.validity.valid) {\n\t\t\tnotify('warning', \"name is required!\");\n\t\t\treturn;\n\t\t}\n\n\t\tlet data = { ...item };\n\t\tlet rc;\n\t\tif (item.id) {\n\t\t\trc = await callServer('PUT', '/resources/'+item.id, data);\n\t\t}\n\t\telse {\n\t\t\trc = await callServer('POST', '/resources', data);\n\t\t}\n\t\tnotify(rc.code, rc.message);\n\t\tif (rc.code == 'success') {\n\t\t\tawait refreshData();\n\t\t}\n\t}\n\n\tasync function deleteItem(){\n\t\tif (item){\n\t\t\tif (confirm(\"Are you sure?\")){\n\t\t\t\tlet rc = await callServer('DELETE', \"/resources/\"+item.id);\n\t\t\t\tnotify(rc.code, rc.message);\n\t\t\t\tif (rc.code==\"success\") await refreshData();\n\t\t\t}\n\t\t}\n\t}\n\tasync function pageChanged(p){\n\t\tpage = p;\n\t\tawait refreshData();\n\t}\n</script>\n\n<div class=\"columns\">\n  <div class=\"column is-two-thirds\">\n    <h2 class=\"title\">\n      Total {pages ? pages.total : ''} resources \n    </h2>\n  \t{#if items.length > 0}\n\t  \t<ItemList {headers} {items} {blankItem} {refreshData} bind:item bind:selectedIdx />\n\t\t<Paginator {pages} {pageChanged}/>\n\t{/if}\n  </div>\n\n  <div class=\"column\">\n\t\t<h2 class=\"title\">&nbsp;</h2>\n\n\t\t<ItemForm label={\"Name\"} >\n\t\t\t<div class=\"control\"><input id=\"name\" required class=\"input\" type=\"text\" placeholder=\"name\" bind:value={item.name}></div>\n\t\t</ItemForm>\n\n\t\t<div class=\"field is-grouped\">\n\t\t\t<div class=\"control\"><button class=\"button is-link\" on:click={updateItem}>{item.id ? 'Update' : 'Create'}</button></div>\n\t\t\t{#if item}\n\t\t\t\t<div class=\"control\"><button class=\"button is-link is-danger\" on:click={deleteItem}>Delete</button></div>\n\t\t\t{/if}\n\t\t</div>\n  </div>\n</div>\n\n<style>\n\t* {\n\t\tbox-sizing: border-box;\n\t}\n</style>"
  ],
  "names": [],
  "mappings": "AAYA,QAAQ,eAAC,CAAC,AACR,OAAO,CAAE,YAAY,CACrB,IAAI,CAAE,YAAY,AACpB,CAAC,AACD,mBAAmB,eAAC,CAAC,AACnB,SAAS,CAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,AACzB,CAAC,AACD,iBAAiB,eAAC,CAAC,AACjB,SAAS,CAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,AACzB,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,SAAS,CAAE,sBAAO,CAAC,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,AAC1C,CAAC,AACD,WAAW,eAAC,CAAC,AACX,KAAK,CAAE,IAAI,AACb,CAAC,AACD,SAAS,eAAC,CAAC,AACT,SAAS,CAAE,sBAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,AACzC,CAAC,AACD,WAAW,sBAAQ,CAAC,AAClB,EAAE,AAAC,CAAC,AACF,SAAS,CAAE,OAAO,IAAI,CAAC,AACzB,CAAC,AACD,IAAI,AAAC,CAAC,AACJ,SAAS,CAAE,OAAO,MAAM,CAAC,AAC3B,CAAC,AACH,CAAC;ACiCA,SAAS,eAAC,CAAC,AACV,gBAAgB,CAAE,IAAI,CACtB,mBAAmB,CAAE,IAAI,CACzB,eAAe,CAAE,IAAI,CACrB,WAAW,CAAE,IAAI,AAClB,CAAC;ACgDD,eAAE,CAAC,AACF,UAAU,CAAE,UAAU,AACvB,CAAC"
}